import telebot
from telebot import types
import logging
import time
from datetime import datetime
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
ADMIN_ID = "1172834372"  # ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
BOT_TOKEN = "7970523336:AAFDbO8hOSjo5QVMYHILPlU-K5YJDzc3ihk"
BANNED_USERS_FILE = "banned_users.txt" # File to store banned user IDs

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = telebot.TeleBot(BOT_TOKEN)

# --- –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ ---
# Dictionary to store user conversations for replies (admin_message_id: user_id)
user_conversations = {}
# Set to store banned user IDs in memory
banned_users = set()
# Dictionary to store username-to-ID mapping (username: user_id)
# This is volatile and will reset on bot restart
username_to_id = {}


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def read_banned_users():
    """Reads banned user IDs from the file into the banned_users set."""
    if not os.path.exists(BANNED_USERS_FILE):
        with open(BANNED_USERS_FILE, 'w') as f:
            pass # Create the file if it doesn't exist
    with open(BANNED_USERS_FILE, 'r') as f:
        for line in f:
            try:
                banned_users.add(int(line.strip()))
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ –±–∞–Ω-–ª–∏—Å—Ç–∞: {line.strip()}")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {banned_users}")

def write_banned_users():
    """Writes banned user IDs from the banned_users set to the file."""
    with open(BANNED_USERS_FILE, 'w') as f:
        for user_id in banned_users:
            f.write(f"{user_id}\n")
    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {banned_users}")

def is_user_banned(user_id):
    """Checks if a user is banned."""
    return user_id in banned_users

def get_user_info(user):
    """
    Helper function to get user info string with a clickable user ID.
    If the user has a username, it will prioritize that.
    """
    user_id_str = str(user.id)
    # Create a clickable link for the user ID
    clickable_user_id = f"<a href='tg://user?id={user_id_str}'>{user_id_str}</a>"

    if user.username:
        return f"@{user.username} ({clickable_user_id})"
    else:
        name = user.first_name if user.first_name else ""
        if user.last_name:
            name += f" {user.last_name}"
        if not name: # Fallback if no first_name or last_name
            name = "–°–∫—Ä—ã—Ç—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        return f"{name} ({clickable_user_id})"

def create_reply_keyboard(user_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))
    return markup

def send_to_admin(content, caption, user_id, content_type='text'):
    """Helper function to send content to admin"""
    sent_msg = None
    try:
        reply_markup = create_reply_keyboard(user_id)
        # Use parse_mode='HTML' to make the clickable user ID work
        if content_type == 'text':
            sent_msg = bot.send_message(ADMIN_ID, f"{caption}", reply_markup=reply_markup, parse_mode='HTML')
        elif content_type == 'photo':
            sent_msg = bot.send_photo(ADMIN_ID, content, caption=f"{caption}", reply_markup=reply_markup, parse_mode='HTML')
        elif content_type == 'voice':
            sent_msg = bot.send_voice(ADMIN_ID, content, caption=f"{caption}", reply_markup=reply_markup, parse_mode='HTML')
        elif content_type == 'video':
            sent_msg = bot.send_video(ADMIN_ID, content, caption=f"{caption}", reply_markup=reply_markup, parse_mode='HTML')
        elif content_type == 'video_note':
            # Video notes don't have a direct caption, the caption should precede it
            bot.send_message(ADMIN_ID, f"{caption}", parse_mode='HTML') # Send caption as a separate message first
            sent_msg = bot.send_video_note(ADMIN_ID, content, reply_markup=reply_markup)
        elif content_type == 'sticker':
            # Stickers also don't have a direct caption, the caption should precede it
            bot.send_message(ADMIN_ID, f"{caption}", parse_mode='HTML') # Send caption as a separate message first
            sent_msg = bot.send_sticker(ADMIN_ID, content, reply_markup=reply_markup)
        elif content_type == 'document':
            sent_msg = bot.send_document(ADMIN_ID, content, caption=f"{caption}", reply_markup=reply_markup, parse_mode='HTML')
        elif content_type == 'gif': # animation type
            sent_msg = bot.send_animation(ADMIN_ID, content, caption=f"{caption}", reply_markup=reply_markup, parse_mode='HTML')

        if sent_msg:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
            user_conversations[sent_msg.message_id] = user_id
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ—Å–µ–¥–∞ –≤ RAM: admin_msg_id={sent_msg.message_id}, user_id={user_id}")
        return True
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"Telegram API Error –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {content_type} –∞–¥–º–∏–Ω—É ({ADMIN_ID}): {e}")
        bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {content_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e.description}", parse_mode='HTML')
        return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {content_type} –∞–¥–º–∏–Ω—É: {e}")
        bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ {content_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", parse_mode='HTML')
        return False

# --- –•–µ–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---

@bot.message_handler(commands=["start"])
def start(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start.")
        return
    bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, üñº –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, üìΩ –≤–∏–¥–µ–æ, üó£ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã –∏–ª–∏ GIF. ")

@bot.message_handler(commands=["ban"])
def ban_user(message):
    if str(message.from_user.id) != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(" ", 1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban &lt;username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&gt;") # Use HTML entities for < and >
        return

    target_identifier = args[1].strip()
    target_id = None

    try:
        # Try to ban by ID first
        target_id = int(target_identifier)
    except ValueError:
        # If not an ID, try to find by username
        # Normalize username for lookup (remove '@' if present, convert to lowercase)
        normalized_username = target_identifier.lstrip('@').lower()
        target_id = username_to_id.get(normalized_username)

    if target_id:
        if target_id == int(ADMIN_ID):
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        if target_id in banned_users:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <a href='tg://user?id={target_id}'>{target_id}</a> —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.", parse_mode='HTML')
            return

        banned_users.add(target_id)
        write_banned_users()
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{normalized_username if normalized_username else ''} <a href='tg://user?id={target_id}'>{target_id}</a> –∑–∞–±–∞–Ω–µ–Ω.", parse_mode='HTML')
        logger.info(f"–ê–¥–º–∏–Ω {get_user_info(message.from_user)} –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º, –µ—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.warning(f"–ê–¥–º–∏–Ω {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É ID –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É username: {target_identifier}")


@bot.message_handler(commands=["unban"])
def unban_user(message):
    if str(message.from_user.id) != ADMIN_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split(" ", 1)
    if len(args) < 2:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban &lt;username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è&gt;")
        return

    target_identifier = args[1].strip()
    target_id = None

    try:
        # Try to unban by ID first
        target_id = int(target_identifier)
    except ValueError:
        # If not an ID, try to find by username
        normalized_username = target_identifier.lstrip('@').lower()
        target_id = username_to_id.get(normalized_username)

    if target_id:
        if target_id in banned_users:
            banned_users.remove(target_id)
            write_banned_users()
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{normalized_username if normalized_username else ''} <a href='tg://user?id={target_id}'>{target_id}</a> —Ä–∞–∑–±–∞–Ω–µ–Ω.", parse_mode='HTML')
            logger.info(f"–ê–¥–º–∏–Ω {get_user_info(message.from_user)} —Ä–∞–∑–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id}.")
        else:
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <a href='tg://user?id={target_id}'>{target_id}</a> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.", parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É ID –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º, –µ—Å–ª–∏ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        logger.warning(f"–ê–¥–º–∏–Ω {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º—É ID –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É username: {target_identifier}")


@bot.message_handler(content_types=["text"])
def handle_text(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        # –≠—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        process_admin_reply(message)
        return

    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∞–¥–º–∏–Ω—É
    user_info = get_user_info(message.from_user)
    caption = f"{user_info}\n{message.text}"
    if send_to_admin(message.text, caption, message.from_user.id):
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        process_admin_reply(message)
        return

    user_info = get_user_info(message.from_user)
    caption = f"{user_info}\n"
    if message.caption:
        caption += f"–ü–æ–¥–ø–∏—Å—å: {message.caption}"

    if send_to_admin(message.photo[-1].file_id, caption, message.from_user.id, 'photo'):
        bot.send_message(message.chat.id, "‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=["video"])
def handle_video(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        process_admin_reply(message)
        return

    user_info = get_user_info(message.from_user)
    caption = f"{user_info}\n"
    if message.caption:
        caption += f"–ü–æ–¥–ø–∏—Å—å: {message.caption}"

    if send_to_admin(message.video.file_id, caption, message.from_user.id, 'video'):
        bot.send_message(message.chat.id, "‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –≤–∏–¥–µ–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=["sticker"])
def handle_sticker(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        process_admin_reply(message)
        return

    user_info = get_user_info(message.from_user)
    caption = f"{user_info}" # –°—Ç–∏–∫–µ—Ä—ã –æ–±—ã—á–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    if send_to_admin(message.sticker.file_id, caption, message.from_user.id, 'sticker'):
        bot.send_message(message.chat.id, "‚úÖ –°—Ç–∏–∫–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à —Å—Ç–∏–∫–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=["animation"])
def handle_gif(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å GIF.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        process_admin_reply(message)
        return

    user_info = get_user_info(message.from_user)
    caption = f"{user_info}\n"
    if message.caption:
        caption += f"–ü–æ–¥–ø–∏—Å—å: {message.caption}"

    if send_to_admin(message.animation.file_id, caption, message.from_user.id, 'gif'):
        bot.send_message(message.chat.id, "‚úÖ GIF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à GIF –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        process_admin_reply(message)
        return

    user_info = get_user_info(message.from_user)
    caption = f"–û—Ç {user_info}" # –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ–±—ã—á–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    if send_to_admin(message.voice.file_id, caption, message.from_user.id, 'voice'):
        bot.send_message(message.chat.id, "‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(content_types=["video_note"])
def handle_video_note(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if str(message.from_user.id) == ADMIN_ID and message.reply_to_message:
        process_admin_reply(message)
        return

    user_info = get_user_info(message.from_user)
    caption = f"{user_info}" # –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
    if send_to_admin(message.video_note.file_id, caption, message.from_user.id, 'video_note'):
        bot.send_message(message.chat.id, "‚úÖ –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True, content_types=telebot.util.content_type_media)
def handle_unsupported_content(message):
    # Update username_to_id mapping
    if message.from_user.username:
        username_to_id[message.from_user.username.lower()] = message.from_user.id

    if is_user_banned(message.from_user.id):
        logger.info(f"–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_info(message.from_user)} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
        return

    if str(message.from_user.id) == ADMIN_ID: # –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {get_user_info(message.from_user)}: {message.content_type}")
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ GIF.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---

@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_"))
def handle_reply_callback(call):
    try:
        user_id = call.data.split("_")[1]
        msg = bot.send_message(call.message.chat.id, f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:")
        # REMOVE OR COMMENT OUT THIS LINE to keep the button
        # bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        bot.register_next_step_handler(msg, process_reply_step, int(user_id)) # Ensure user_id is an int
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback (reply_): {e}")
        bot.send_message(call.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

def process_admin_reply(message):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –±–æ—Ç–æ–º
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        original_user_id = user_conversations.get(message.reply_to_message.message_id)
        if original_user_id:
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            process_reply_step(message, original_user_id)
        else:
            logger.warning(f"–ê–¥–º–∏–Ω {ADMIN_ID} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.reply_to_message.message_id}, –Ω–æ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ RAM (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω).")
            bot.send_message(ADMIN_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_admin_reply: {e}")
        bot.send_message(ADMIN_ID, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")


def process_reply_step(message, user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    user_id –∑–¥–µ—Å—å - —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.
    """
    try:
        send_methods = {
            'text': bot.send_message,
            'photo': bot.send_photo,
            'video': bot.send_video,
            'sticker': bot.send_sticker,
            'animation': bot.send_animation, # GIF
            'voice': bot.send_voice,
            'video_note': bot.send_video_note,
            'document': bot.send_document # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∞–¥–º–∏–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
        }

        send_method = send_methods.get(message.content_type)
        if send_method:
            if message.content_type == 'text':
                send_method(user_id, f"üîµ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
            elif message.content_type in ['photo', 'video', 'document', 'animation', 'voice']: # –≠—Ç–∏ —Ç–∏–ø—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –ø–æ–¥–ø–∏—Å—å
                caption_text = message.caption if message.caption else ""
                send_method(user_id, getattr(message, message.content_type).file_id, caption=f"üîµ –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{caption_text}")
            elif message.content_type in ['sticker', 'video_note']: # –≠—Ç–∏ —Ç–∏–ø—ã –æ–±—ã—á–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
                send_method(user_id, getattr(message, message.content_type).file_id)
            else:
                # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—ã–ª —É—á—Ç–µ–Ω –≤—ã—à–µ
                send_method(user_id, getattr(message, message.content_type).file_id)

            bot.send_message(message.chat.id, f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!") # Changed this line
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª {message.content_type} –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            bot.send_message(message.chat.id, "‚ùå –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä–æ–º, GIF, –≥–æ–ª–æ—Å–æ–≤—ã–º –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.")
            logger.warning(f"–ê–¥–º–∏–Ω {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç ({message.content_type}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except telebot.apihelper.ApiTelegramException as e:
        if e.error_code == 403:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—à–∏–±–∫–∞: {e}")
            bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user_id}'>{user_id}</a> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", parse_mode='HTML')
        elif e.error_code == 429:
            retry_after = e.result_json.get('parameters', {}).get('retry_after', 5) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
            logger.warning(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥. –û—à–∏–±–∫–∞: {e}")
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram API. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥.")
        else:
            logger.error(f"Telegram API Error –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: –ö–æ–¥ {e.error_code} - {e.description}")
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e.description}")
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    read_banned_users() # Load banned users on startup
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.polling(none_stop=True)
