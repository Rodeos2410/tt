import os
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = "8360251674:AAGvGDMudrgHwOYHX7ud01GL8S1Ww6ccZso"
ADMIN_FILE = "admins.txt"

# --- –õ–û–ì–ò–ö–ê –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ---

def load_admins():
    if not os.path.exists(ADMIN_FILE):
        return []
    with open(ADMIN_FILE, 'r') as f:
        return [int(line.strip()) for line in f if line.strip().isdigit()]

def save_admins(admin_ids):
    with open(ADMIN_FILE, 'w') as f:
        for admin_id in admin_ids:
            f.write(str(admin_id) + '\n')

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def parse_time(time_string: str) -> datetime.timedelta:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ (10m, 2h, 1d) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç timedelta."""
    unit = time_string[-1].lower()
    value = int(time_string[:-1])
    if unit == 'm':
        return datetime.timedelta(minutes=value)
    elif unit == 'h':
        return datetime.timedelta(hours=value)
    elif unit == 'd':
        return datetime.timedelta(days=value)
    else:
        return datetime.timedelta()

# --- –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í –ê–î–ú–ò–ù–ê ---

def admin_required(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        ADMIN_IDS = load_admins()
        user_id = update.effective_user.id
        if not ADMIN_IDS and func.__name__ not in ['start', 'show_menu', 'init_super_admin']:
             await update.callback_query.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /init.", show_alert=True)
             return

        if user_id not in ADMIN_IDS:
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–ø–¥–µ–π—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)
            if update.callback_query:
                await update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            else:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapper

# --- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –ú–ï–ù–Æ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é."""
    await show_menu(update, context)

@admin_required
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = [
        [InlineKeyboardButton("üëÆ‚Äç‚ôÄÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data='menu_moderation')],
        [InlineKeyboardButton("üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", callback_data='menu_admins')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='menu_info')],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data='close_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üëã **–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!**\n\n–Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –≥–æ—Ç–æ–≤—ã–π –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ. –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ.
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ú–û–î–ï–†–ê–¶–ò–ò (–≤—ã–∑—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ reply) ---

@admin_required
async def handle_moderation_command(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–Ω–∞, –º—É—Ç–∞, –∫–∏–∫–∞ –∏ –≤–∞—Ä–Ω–∞."""
    if not update.message.reply_to_message:
        await update.message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user = update.message.reply_to_message.from_user
    admin_user = update.message.from_user
    chat_id = update.message.chat_id
    reason = " ".join(context.args) if context.args else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    try:
        if action == 'kick':
            await context.bot.kick_chat_member(chat_id, target_user.id)
            await update.message.reply_text(f"üëü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.full_name} –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–æ–º {admin_user.full_name}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        
        elif action == 'ban':
            await context.bot.ban_chat_member(chat_id, target_user.id)
            await update.message.reply_text(f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.full_name} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞ –∞–¥–º–∏–Ω–æ–º {admin_user.full_name}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

        elif action == 'mute':
            if not context.args:
                await update.message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –º—É—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/mute 10m` –∏–ª–∏ `/mute 2h`).")
                return
            
            duration_str = context.args[0]
            reason = " ".join(context.args[1:]) if len(context.args) > 1 else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            duration = parse_time(duration_str)
            
            if duration.total_seconds() == 0:
                await update.message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `m` (–º–∏–Ω—É—Ç—ã), `h` (—á–∞—Å—ã), `d` (–¥–Ω–∏).")
                return

            until_date = datetime.datetime.now() + duration
            await context.bot.restrict_chat_member(
                chat_id, 
                target_user.id, 
                ChatPermissions(can_send_messages=False),
                until_date=until_date
            )
            await update.message.reply_text(f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.full_name} –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –¥–æ {until_date.strftime('%Y-%m-%d %H:%M')}.\n–ê–¥–º–∏–Ω: {admin_user.full_name}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")

        elif action == 'unmute':
             await context.bot.restrict_chat_member(
                chat_id, 
                target_user.id, 
                ChatPermissions(can_send_messages=True, can_send_media_messages=True, can_send_polls=True, can_send_other_messages=True)
            )
             await update.message.reply_text(f"üîä –ú—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.full_name} —Å–Ω—è—Ç.")

    except Exception as e:
        await update.message.reply_text(f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:** {e}\n\n–í–æ–∑–º–æ–∂–Ω–æ, —É –º–µ–Ω—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")

async def kick_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await handle_moderation_command(update, context, 'kick')
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await handle_moderation_command(update, context, 'ban')
async def mute_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await handle_moderation_command(update, context, 'mute')
async def unmute_command(update: Update, context: ContextTypes.DEFAULT_TYPE): await handle_moderation_command(update, context, 'unmute')

# --- –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú–ò ---
@admin_required
async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ...
    pass

@admin_required
async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_IDS = load_admins()
    if not ADMIN_IDS:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    
    admin_list_text = "üëë **–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:**\n"
    for admin_id in ADMIN_IDS:
        try:
            user = await context.bot.get_chat(admin_id)
            admin_list_text += f"- {user.full_name} (`{admin_id}`)\n"
        except Exception:
            admin_list_text += f"- *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ* (`{admin_id}`)\n"
            
    await update.message.reply_text(admin_list_text, parse_mode=ParseMode.MARKDOWN)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ò–ù–§–û ---

async def init_super_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ...
    pass

async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞."""
    await update.message.reply_text(f"üë§ –í–∞—à ID: `{update.effective_user.id}`\nüí¨ ID —á–∞—Ç–∞: `{update.effective_chat.id}`", parse_mode=ParseMode.MARKDOWN)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò (CALLBACKS) ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    
    data = query.data

    if data == 'close_menu':
        await query.edit_message_text("–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ.")
        return
        
    if data == 'main_menu':
        await show_menu(update, context)
        return

    # --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é ---
    if data == 'menu_moderation':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        text = """
üëÆ‚Äç‚ôÄÔ∏è **–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- `/kick [–ø—Ä–∏—á–∏–Ω–∞]` - –∏—Å–∫–ª—é—á–∏—Ç—å
- `/ban [–ø—Ä–∏—á–∏–Ω–∞]` - –∑–∞–±–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
- `/mute <–≤—Ä–µ–º—è> [–ø—Ä–∏—á–∏–Ω–∞]` - –∑–∞–º—É—Ç–∏—Ç—å (e.g. `/mute 10m`)
- `/unmute` - —Ä–∞–∑–º—É—Ç–∏—Ç—å
        """
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

    elif data == 'menu_admins':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        text = """
üëë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏**

- `/addadmin` - —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- `/removeadmin` - –∑–∞–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
- `/listadmins` - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞
        """
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    
    elif data == 'menu_info':
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        text = """
‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**

- `/id` - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –∏ ID —á–∞—Ç–∞
- `/menu` - –û—Ç–∫—Ä—ã—Ç—å —ç—Ç–æ –º–µ–Ω—é
        """
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)


def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", show_menu))
    application.add_handler(CommandHandler("init", init_super_admin))
    application.add_handler(CommandHandler("id", get_id))
    
    # –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    application.add_handler(CommandHandler("kick", kick_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("mute", mute_command))
    application.add_handler(CommandHandler("unmute", unmute_command))
    
    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤
    application.add_handler(CommandHandler("listadmins", list_admins))
    # ... –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ add_admin –∏ remove_admin –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    # –ö–æ–¥ –¥–ª—è add_admin, remove_admin, init_super_admin –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    # –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, —Ç.–∫. –æ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.
    # –Ø –æ–ø—É—Å—Ç–∏–ª –µ–≥–æ –∑–¥–µ—Å—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏.
    main()